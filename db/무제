# 데이터베이스

데이터들의 집합. 

* 데이터 vs 정보
  * 데이터
    * 현식 세계에서 관찰된 값
    * 의미부여 X
  * 정보
    * 의사 결정에 유용하게 쓰려고 데이터를 처리한 결과물
    * 의미 부여 O

* 정보 처리(information processing)
  * 데이터에서 정보를 추출하는 과정
  * Ex. 주문 내역 `-정보 처리->` 제품별 총 판매액
* 정보 시스템 (information system)
  * 조직 운영에 필요한 데이터를 수집하여 저장해 두었다가 필요할 때 유용한 정보를 만들어주는 수단
  * 일명 DBMS
* 데이터 베이스
  * 정보 시스템 안에서 데이터를 저장하고 있다가 필요할 때 제공하는 역할을 담당

![image-20231231092419492](/Users/mtak/Library/Application Support/typora-user-images/image-20231231092419492.png)

* 데이터 베이스
  * 특정 조직의 여로 사용자가 **공유**하여 사용할 수 있도록 **통합**해서 **저장**한 **운영**데이터의 집합
    * 공유 데이터
      * 특정 조직의 여러 사용자가 함께 소유하고 이용할 수 있는 공용 데이터
    * 통합 데이터
      * 최소의 중복과 통제 가능한 중복만 허용하는 데이터
    * 저장 데이터
      * 컴퓨터가 접근할 수 있는 매체에 저장된 데이터
    * 운영 데이터
      * 조직의 주요 기능을 수행하기 위해 지속적으로 유지해야 하는 데이터
  * 특성
    * 실시간 접근
      * 사용자의 데이터 요구에 실시간으로 응답
    * 계속 변화
      * 데이터의 계속적인 삽입, 삭제, 수정을 통해 현재의 정확한 데이터를 유지
      * Ex. 사원의 입사 퇴사에 따른 변화를 반영
    * 동시 공유
      * 서로 다른 데이터의 동시 사용 뿐 아니라 같은 데이터의 동시 사용도 지원
    * 내용 기반 참조
      * 데이터가 저장된 주소나 위치가 아닌 내용으로 참조
      * Ex. 연봉이 500 이상이고 과장 이상인 사원을 셀랙해라. 

# 데이터베이스 관리 시스템

* 파일 시스템
  * 데이터를 파일로 관리하기 위해 파일을 생성, 삭제, 수정, 검햇 기능을 제공하는 SW
  * 응용 프로그램마다 필요한 데이터를 별도의 파일로 관리한다.
  * 문제점
    * 같은 내용의 데이터가 여러 파일에 중복 저장된다.→ 데이터 중복성
      * 저장 공간의 낭비
      * 데이터의 일관성 깨짐
      * 데이터의 무결성 깨짐
    * 응용 프로그램이 데이터 파일에 종속적이다.→데이터 종속성
      * 사용하는 파일의 구조를 변경하면 응용 프로그램도 함께 변경해야 함.
    * 데이터 파일에 대한 동시 공유, 보안, 회복 기능이 부족하다. 
    * 응용 프로그램 개발이 쉽지 않다. 
* 파일 시스템의 주요 문제점
  * 같은 내용의 데이터가 여러 파일에 중

* 데이터베이스 관리 시스템 ( DBMS)
  * 파일 시스템의 문제 (데이터 종속성, 데이터 중복성)를 해결하기 위해 제시된 소프트웨어
  * 조직에 필요한 데이터를 데이터베이스에 통합하여 저장하고 관리한다. 
  * 기능
    * 정의 기능
      * 데이터베이스의 구조를 정의하거나 수정할 수 있다. 
    * 조작 기능
      * 데이터를 삽입, 삭제, 수정, 검색하는 연산 가능하다. 
    * 제어 기능
      * 데이터를 정확하고 안전하게 유지할 수 있다. 
  * 장단점
    * 장점
      * 데이터 중복 통제 가능
      * 데이터 독립성 확보
      * 데이터를 동시에 공유 가능
      * 데이터 보안이 향상
      * 데이터 무결성 유지 가능
      * 표준화 가능
      * 장애 발새이 시 회복이 가능
      * 응용 프로그램 개발 비용이 줄어든다. 
    * 단점
      * 비싸다
      * 백업과 회복 방법이 복잡
      * 중앙 집중 관리로 인한 취약점

![image-20231231094135861](/Users/mtak/Library/Application Support/typora-user-images/image-20231231094135861.png)

* DBMS  발전 과정

  * 1세대

    * 네트워크 DBMS

      * 구조가 복잡하고 변경이 어렵다. 
      * Ex. IDS![image-20231231094737622](/Users/mtak/Library/Application Support/typora-user-images/image-20231231094737622.png)

    * 계층 DBMS

      *  구조 변경이 어렵다. 
      * Ex. IMS

      ![image-20231231094751060](/Users/mtak/Library/Application Support/typora-user-images/image-20231231094751060.png)

  * 2세대

    * 관계 DBMS
    * 테이블 형태
      * Ex. Oracle, MySQL Server

  * 3세대

    * 객체지향 DBMS
      * Ex. O2, ONTOS
    * 객체관계 DBMS

    ![image-20231231095140701](/Users/mtak/Library/Application Support/typora-user-images/image-20231231095140701.png)

# 데이터베이스 시스템

![image-20231231095241754](/Users/mtak/Library/Application Support/typora-user-images/image-20231231095241754.png)

* 데이터베이스 시스템(DBS)

  * 데이터베이스에 데이터를 저장하고, 이를 관리하여 조직에 필요한 정보를 생성해주는 시스템
  * 구조
    * 스키마(shema)
      * 데이터베이스에 저장되는 데이터 구조와 제약 조건을 정의한 것
      * 뼈대
    * 인스턴스(instance)
      * 스키마에 따라 데이터베이스에 실제로 저장된 값
      * 살

* 3단계 데이터베이스 구조

  * 데이터베이스를 바라보는 관점 3가지

    * 외부 단계

      * 개별 사용자 관점

      * 데이터베이스 하나에 외부 스키마다 여러개 존재할 수 있다.

        > 외부 스키마 (서브 스키마)
        >
        > * 외부 단계에서 사용자에게 필요한 데이터베이스를 정의한 것
        > * 각 사용자가 생각하는 데이터베이스늬 모습은 사용자마다 다르다.

    * 개념 단계

      * 조직 전체의 관점

      * 데이터베이스 하나에 개념 스키마가 하나만 존재한다.

        > 개념 스키마
        >
        > * 개념 단계에서 데이터베이스 전체의 논리적 구조를 정의한 것
        > * 전체 데이터베이스에 어떤 데이터가 저장되는지, 데이터들 간에는 어떤 관계가 존재하고 어떤 제약조건이 존제하는지 정의 뿐 아니라, 데이터에 대한 보안 정책이나 접근 권한에 대한 정의도 포함한다.

    * 내부 단계

      * 물리적인 저장 장치의 관점

      * 데이터베이스 하나에 내부 스키마가 하나만 존재한다.

        > 내부 스키마
        >
        > * 전체 데이터베이스가 저장 장치에 실제로 저장되는 방법을 정의한 것
        > * 레코드 구조, 필드 크기, 레코드 접근 경로 등 물리적인 저장구조를 정의

  * 각 단계별로 다른 abstraction 제공

    * 내부 단계에서 외부 단계로 갈수록 더 abstract됨

  ![image-20231231100328132](/Users/mtak/Library/Application Support/typora-user-images/image-20231231100328132.png)

![image-20231231101007454](/Users/mtak/Library/Application Support/typora-user-images/image-20231231101007454.png)

* 외부/개념 사상 (application interface) → 논리적 데이터 독립성
* 개념/내부 사상 (storage interface) → 물리적 데이터 독립성

* 데이터 독립성
  * 하위 스키마를 변경하더라도 상위 스키마는 영향을 받지 않는 특성
    * 논리적 데이터 독립성
      * 개념 스키마가 변경되어도 외부 스키마는 영향을 받지 않는 특성
      * 개념 스키마가 변경되면 관련 외부/개념 사상만 정확하게 수정해주면 됨.
    * 물리적 데이터 독립성
      * 내부 스키마가 변경되어도 개념 스키마는 영향을 받지 않는 특성
      * 내부 스키마가 변경되면 관련된 개념/내부 사상만 정확하게 수정해주면 됨

* 데이터 사전
  * 



2024년 새해 복 많이 받으시기 바랍니다:)
